# Avoid breaking non-interactive logins (eg sftp)
if [[ $- == *i* ]]; then

  # Determine OS type {{{
  export OSTYPE="$(uname -s)"
  # }}}

  # History {{{
  export HISTFILE=~/.bash_history
  export HISTFILESIZE=-1
  export HISTIGNORE="&:[ ]*:exit:sudo*"
  export HISTCONTROL=ignoreboth
  export HISTTIMEFORMAT="%F %T %Z "
  shopt -s histappend histverify
  # }}}

  # Theme {{{
  # https://gist.github.com/thomd/7667642
  # https://geoff.greer.fm/lscolors/
  function get_termbg() {
    if [[ "$TERM" == "xterm-"* ]] || [[ "$TERM" == "alacritty" ]]; then
      oldstty=$(stty -g)
      stty raw -echo min 0 time 1
      # terminal escape sequence to get the terminal background color
      # only works in xterms
      # https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Operating-System-Commands
      printf '\033]11;?\033\\'
      sleep 0.00000001
      read -r termbg
      stty $oldstty
      local termbg=$(echo $termbg | sed 's/.*\(rgb:[0-9a-f/]*\).*/\1/')
      if [[ $termbg == "rgb:f8f8/fbfb/f8f8" ]]; then
        export THEME="leuven"
      elif [[ $termbg == "rgb:2828/2a2a/3636" ]]; then
        export THEME="dracula"
      fi
    fi
  }
  if [[ -z "$THEME" ]]; then export THEME=""; fi
  get_termbg
  export CLICOLOR=1
  export LSCOLORS="excxhxDxbxhxhxhxhxfxfx"
  export LS_COLORS=""
  if [[ $THEME == "leuven" ]]; then
    LS_COLORS="no=00:fi=00:di=34:ln=32;102:so=30;107:pi=33;103:ex=31:cd=33;107:bd=33;107:su=31;101:sg=34;106:tw=35;101:ow=34;101"
  elif [[ $THEME == "dracula" ]]; then
    LS_COLORS="no=00:fi=00:di=34::ln=32:so=37:pi=1;33:ex=31:bd=37:cd=37:su=37:sg=37:tw=35:ow=35"
  fi
  # }}}

  # Program specific {{{

  ## PATH {{{
  # add ~/.local/bin to PATH, before looking for other commands
  export PATH=$HOME/.local/bin:$PATH
  ## }}}

  ## brew {{{
  if [ -f $HOME/.linuxbrew/bin/brew ]; then
    export HOMEBREW_PREFIX=$HOME/.linuxbrew
  elif [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
    export HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew
  elif hash brew &>/dev/null && [[ -z "$HOMEBREW_PREFIX" ]]; then
    export HOMEBREW_PREFIX=$(brew --prefix)
  fi

  if [[ -n "$HOMEBREW_PREFIX" ]]; then
    export HOMEBREW_CELLAR=$HOMEBREW_PREFIX/Cellar
    export HOMEBREW_REPOSITORY=$HOMEBREW_PREFIX/Homebrew
    # ${parameter+alt_value} if parameter set use alt_value else use null string
    export MANPATH="$HOMEBREW_PREFIX/share/man${MANPATH+:$MANPATH}:"
    export INFOPATH="$HOMEBREW_PREFIX/share/info${INFOPATH+:$INFOPATH}"
    export PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin${PATH+:$PATH}"
    export FPATH="$HOMEBREW_PREFIX/share/zsh/site-functions${FPATH+:$FPATH}"
  fi
  ## }}}

  ## cuda {{{
  if [ -d /usr/local/cuda ]; then
    export PATH="/usr/local/cuda/bin${PATH+:$PATH}"
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH+:$LD_LIBRARY_PATH}"
  fi
  ## }}}


  ## text editor {{{
  if hash nvim 2>/dev/null; then
    export EDITOR=$(which nvim)
    export VISUAL=$(which nvim)
  elif hash vim 2>/dev/null; then
    export EDITOR=$(which vim)
    export VISUAL=$(which vim)
  else
    export EDITOR=$(which vi)
    export VISUAL=$(which vi)
  fi
  ## }}}

  ## tex {{{
  if hash tex 2>/dev/null; then
    export TEXMFCONFIG=$HOME/.local/share/texlive/texmf-config
    export TEXMFVAR=$HOME/.local/share/texlive/texmf-var
    export TEXMFHOME=$HOME/.local/share/texlive/texmf
  fi
  ## }}}

  ## pyenv {{{
  if hash pyenv 2>/dev/null; then
    export PYENV_ROOT="$(pyenv root)"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
  fi
  ## }}}

  ## rbenv {{{
  if hash rbenv 2>/dev/null; then
    eval "$(rbenv init -)"
    export RBENV_ROOT="$(rbenv root)"
  fi
  ## }}}

  ## r {{{
  if hash R 2>/dev/null; then
    export R_PROFILE=$HOME/.RProfile
    alias R='R --no-save --no-restore'
    alias r='R --no-save --no-restore'
  fi
  ## }}}

  ## go {{{
  if hash go 2>/dev/null; then
    export GOPATH=$HOME/.go
  fi
  ## }}}

  ## kitty {{{
  if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"
  fi
  ##}}}

  ## nnn {{{
  # https://github.com/jarun/nnn
  if hash nnn 2>/dev/null; then
    export NNN_PLUG="/:fcd;p:preview-tui;m:mimelist;f:followln"
    export NNN_OPENER="nuke"
    n(){
      # To cd on quit only on ^G
      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

      # Block nesting of nnn in subshells
      [ "${NNNLVL:-0}" -eq 0 ] || {
          echo "nnn is already running"
          return
      }

      nnn -ea

      if [ -f "$NNN_TMPFILE" ]; then
              . "$NNN_TMPFILE"
              rm -f "$NNN_TMPFILE" > /dev/null
      fi
    }
  fi
  ##}}}

  # }}}

  # PS1 {{{
  # (py env)[host user]:~ 99$
  # information about the current dev environment
  function _devenv_info() {
    if hash $1 2>/dev/null; then
      local venv=$($1 version-name)
      if [ -n "$venv" ] && [ $venv != system ]; then
        printf "$2 $venv"
      fi
    fi
    return
  }
  function _precmd_ps1() {
    local dev_info_msg

    if [[ -n $IN_NIX_SHELL ]]; then
      dev_info_msg="${dev_info_msg}nix-shell"
    fi

    local pyenv_info_msg=`_devenv_info pyenv py`
    if [[ -n $pyenv_info_msg ]]; then
        dev_info_msg="${dev_info_msg}${pyenv_info_msg}"
    fi

    local rbenv_info_msg=`_devenv_info rbenv rb`
    if [[ -n $rbenv_info_msg ]]; then
      if [[ -n $dev_info_msg ]]; then
        dev_info_msg="${dev_info_msg}, "
      fi
      dev_info_msg="${dev_info_msg}${rbenv_info_msg}"
    fi

    if [[ -n $dev_info_msg ]]; then
      dev_info_msg="(${dev_info_msg})"
    fi

    echo "$dev_info_msg"
  }
  function _ps1() {

    local info='[\h \u]:\W \$'
    local color=""
    local reset_color=' '
    if [[ $THEME == "leuven" ]]; then
      if [[ -n $SSH_CLIENT ]]; then
        color='$(if [[ $? == 0 ]]; then echo "\[\e[47:5:10m\]";else echo "\[\e[38:5:1m\]\[\e[48:5:9m\]"; fi)'
      else
        color='$(if [[ $? == 0 ]]; then echo "\[\e[48:5:11m\]";else echo "\[\e[38:5:1m\]\[\e[48:5:9m\]"; fi)'
      fi
      reset_color='\[\e[0m\] '
    elif [[ $THEME == "dracula" ]]; then
      if [[ -n $SSH_CLIENT ]]; then
        color='$(if [[ $? == 0 ]]; then echo "\[\e[00;35m\]";else echo "\[\e[00;31m\]"; fi)'
      else
        color='$(if [[ $? == 0 ]]; then echo "\[\e[00;30m\]";else echo "\[\e[00;31m\]"; fi)'
      fi
      reset_color='\[\e[0m\] \[\e[33m\]'
    fi
    printf %s "$color$(_precmd_ps1)$info$reset_color"
    return 0
  }

  # prompt will be highlighted in red if previous command fails
  # command prompt text is always highlited in yellow
  function PreCommand() {
    if [ -z "$AT_PROMPT" ]; then
      return
    fi
    unset AT_PROMPT
    printf '\033[0m'
  }
  # reset colours prior to printing output
  trap "PreCommand" DEBUG

  FIRST_PROMPT=1
  function PostCommand() {
    AT_PROMPT=1
    PS1=$(_ps1)
    if [ -n "$FIRST_PROMPT" ]; then
      unset FIRST_PROMPT
      return
    fi
  }
  PROMPT_COMMAND="PostCommand"

  export PS1=$(_ps1)
  # }}}

  # Alias {{{

  ## Source bashrc {{{
  alias bashrc='source ~/.bashrc'
  ## }}}

  ## List with colors by default {{{
  alias ls='ls --color=auto'
  ## }}}

  if [[ $OSTYPE == Linux* ]]; then

    ## More convenient xdg-open {{{
    function open { setsid xdg-open "$1" &>/dev/null; } 
    ## }}}

  fi

  if  [[ $OSTYPE == Darwin* ]]; then

    ## turn on/off hidden files visibility {{{
    alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
    alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
    ## }}}

    ## ql: show a "Quick Look" view of files {{{
    ql() { /usr/bin/qlmanage -p "$@" >& /dev/null & }
    ## }}}

    ## firefox: open document in Firefox {{{
    firefox() { if [ $1 ]; then open -a Firefox $1; else open -a "Firefox"; fi }
    ## }}}

  fi

  # }}}

  # PATH {{{
  # add ~/.local/bin to PATH to the front of the path
  export PATH=$HOME/.local/bin:$PATH
  # removes duplicates from the PATH, given that the above can introduce duplicates
  PATH=`printf %s "$PATH" | awk -v RS=: '{ if (!arr[$0]++) {printf("%s%s",!ln++?"":":",$0)}}'`
  # }}}

   # Program specific {{{

  # direnv {{{
  # the hook has to appear at the end
  if hash direnv 2>/dev/null; then
    eval "$(direnv hook bash)"
  fi
  # }}}

  # }}}

fi
