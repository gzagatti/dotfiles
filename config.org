* Emacs configuration

** Intro

My main motivation in switching to Emacs is Org-mode. So there is no better way to start, then to implement a literate configuration

#+BEGIN_SRC emacs-lisp
  (defconst emacs-start-time (current-time))
  ; Basic Settings {{{
  ;; Basic {{{
  ; avoid loading old bytecode instead of newer source
  (setq load-prefer-newer t)
  (setq inhibit-startup-screen t)
  ;;}}}


  ;; Mouse {{{
  (if window-system
    ; doom
    (setq hscroll-margin 2
          hscroll-step 1
          ;; Emacs spends too much effort recentering the screen if you scroll the
          ;; cursor more than N lines past window edges (where N is the settings of
          ;; `scroll-conservatively'). This is especially slow in larger files
          ;; during large-scale scrolling commands. If kept over 100, the window is
          ;; never automatically recentered.
          scroll-conservatively 101
          scroll-margin 0
          scroll-preserve-screen-position t
          ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
          ;; for tall lines.
          auto-window-vscroll nil
          ;; mouse
          mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
          mouse-wheel-scroll-amount-horizontal 2)
    ((require 'mouse)
        (xterm-mouse-mode t)
        (global-set-key [mouse-4] (lambda ()
        (interactive)
        (scroll-down 1)))
        (global-set-key [mouse-5] (lambda ()
        (interactive)
        (scroll-up 1)))
        (defun track-mouse (e))
        (setq mouse-sel-mode t)
  ))
  ;;}}}

  ;; Line ruler {{{
  (setq-default display-line-numbers-width 3)
  (global-display-line-numbers-mode)
  ;;}}}

  ;; doom {{{
  ; don't prompt for configuration when create a new file
  (setq confirm-nonexistent-file-or-buffer nil)

  ; GUIs are inconsistent across systems and themes
  (setq use-dialog-box nil)
  (when (bound-and-true-p tooltip-mode)
    (tooltip-mode -1))
  ;(when IS-LINUX
  ;  (setq x-gtk-use-system-tooltips nil))

  ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
  ;; feedback after typing is better UX than no feedback at all.
  (setq echo-keystrokes 0.02)

  ;; Typing yes/no is obnoxious when y/n will do
  (advice-add #'yes-or-no-p :override #'y-or-n-p)
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;;}}}

  ;; *scratch* {{{
  ; https://www.emacswiki.org/emacs/RecreateScratchBuffer
  ;;}}}

  ;}}}


  ; Packages {{{
  ;; straight.el {{{
  (setq package-enable-at-startup nil)

  (defvar bootstrap-version)

  (let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
  (with-current-buffer
      (url-retrieve-synchronously
      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
      'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)
      )
  ;;}}}

  ;; Tools {{{

  ;;; evil {{{
  ;https://evil.readthedocs.io/en/latest/overview.html
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-move-beyond-eol t)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-redo)
  (setq evil-collection-mode-list '(
    magit
    help
    org
  ))
  (straight-use-package 'evil)                                             ; the extensible vi layer for Emacs
  (straight-use-package 'evil-collection)
  (evil-mode 1)
  (when (require 'evil-collection nil t)
    (evil-collection-init))
  (evil-set-leader 'visual (kbd ";"))
  (evil-set-leader 'normal (kbd ";"))
  (evil-define-key 'visual 'global (kbd "<leader>y") 'clipboard-kill-ring-save)
  (evil-define-key 'normal 'global (kbd "<leader>p") 'clipboard-yank)
  (evil-define-key 'normal 'global (kbd "<leader>fs") 'save-buffer)
  ;;;}}}

  ;;; navigate {{{
  (straight-use-package
    '(navigate :type git :host github :repo  "keith/evil-tmux-navigator")) ; seamlessly navigate Emacs and tmux splits
  (require 'navigate)
  ;;;}}}

  ;;; theme {{{
  (straight-use-package 'dracula-theme)                                    ; dracula theme
  (load-theme 'dracula t)
  ;;;}}}

  ;; fonts {{{
  ;; there was a lot of issues with the font due to how emacs was built
  ;; it is necessary to ensure that it builds with GTK-3 support in Linux
  (set-face-attribute 'default nil
                      :font "Cousine for Powerline"
                      :height 104
                      :weight 'normal
                      :width 'normal)
  ;;}}}

  ;;; powerline {{{
  (straight-use-package 'powerline)                                        ; emacs powerline
  (powerline-default-theme)
  ;;;}}}

  ;;; adaptive-wrap {{{
  (straight-use-package 'adaptive-wrap)

  (defvar +word-wrap-extra-indent 'double)

  (defvar +word-wrap-disabled-modes
    '(fundamental-mode so-long-mode)
    "Major-modes where `+global-word-wrap-mode' should not enable `+word-wrap-mode'.")

  (defvar +word-wrap-visual-modes
    '(org-mode)
    "Major mode where `+word-wrap-mode' should not enable `adaptive-wrap-prefix-mode'.")

  (defvar +word-wrap-text-modes
    '(text-mode markdown-mode markdown-view-mode gfm-mode gfm-view-mode rst-mode latex-mode LaTex-mode)
    "Major-modes where `+word-wrap-mode' should not provide extra indentation.")

  (defvar +word-wrap--major-mode-is-visual nil)
  (defvar +word-wrap--major-mode-is-text nil)
  (defvar +word-wrap--enable-adaptive-wrap-mode nil)
  (defvar +word-wrap--enable-visual-line-mode nil)

  ;;;###autoload
  (define-minor-mode +word-wrap-mode
    "Wrap long lines in the buffer with langugage-aware indentation.

  Wrapped lines will be indented to match the preceding line. In code buffers,
  lines which are not inside a string or comment will have additional indentation
  according to the configuration of `+word-wrap-extra-indent'."
    :init-value nil
    (if +word-wrap-mode
      (progn
        (setq-local +word-wrap--major-mode-is-visual
          (memq major-mode +word-wrap-visual-modes))
        (setq-local +word-wrap--major-mode-is-text
          (memq major-mode +word-wrap-text-modes))

        (setq-local +word-wrap--enable-adaptive-wrap-mode
          (and (not (bound-and-true-p adaptive-wrap-prefix-mode))
               (not +word-wrap--major-mode-is-visual)))

        (setq-local +word-wrap--enable-visual-line-mode
          (not (bound-and-true-p visual-line-mode)))

        (when +word-wrap--enable-adaptive-wrap-mode
          (adaptive-wrap-prefix-mode +1))
        (when +word-wrap--enable-visual-line-mode
          (visual-line-mode +1)))

        (when +word-wrap--enable-adaptive-wrap-mode
          (adaptive-wrap-prefix-mode -1))
        (when +word-wrap--enable-visual-line-mode
          (visual-line-mode -1))))

  (defun +word-wrap--enable-global-mode ()
    "Enable `+word-wrap-mode' for `+word-wrap-global-mode'.

  Wrapping will be automatically enabled in all modes except special mode, or
  modes explicitly listed in `+word-wrap-disabled-modes'."
    (unless (or (eq (get major-mode 'mode-class) 'special)
        (memq major-mode +word-wrap-disabled-modes))
      (+word-wrap-mode +1)))

  ;;;###autoload
  (define-globalized-minor-mode +global-word-wrap-mode
    +word-wrap-mode +word-wrap--enable-global-mode)

  (+global-word-wrap-mode +1)
  ;;;}}}

  ;; white space {{{
  ; https://dougie.io/emacs/indentation/
  ;(setq-default electric-indent-inhibit t)
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq-default evil-shift-width 2)
  (evil-define-key 'insert 'global (kbd "TAB") 'tab-to-tab-stop)
  ;(defun disable-tabs () (setq indent-tabs-mode nil))
  ;(defun enable-tabs  ()
  ;  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  ;  (setq indent-tabs-mode t)
  ;  (setq tab-width custom-tab-width))
  (setq backward-delete-char-untabify-method 'hungry)
  (setq whitespace-style '(face tabs tab-mark trailing indentation))
  (global-whitespace-mode)
  (custom-set-faces
    '(whitespace-trailing ((t (:foreground nil :background "#373844"))))
    '(whitespace-tab ((t (:foreground "#636363" :background nil)))))
  (setq whitespace-display-mappings
  '((tab-mark 9 [62 32 92 92 92]))) ; print tab as > \\\
  (evil-define-key 'normal 'global (kbd "<leader>dt") 'whitespace-cleanup)
  ;;}}}

  ;;; neotree {{{
  (straight-use-package 'neotree)                                          ; file management from within Emacs
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)
  ;;;}}}

  ;;; magit {{{
  (straight-use-package 'magit)                                            ; a git porcelain
  ;;;}}}

  ;;; vimmish-fold {{{
  (straight-use-package 'vimish-fold)                                      ; vim-like text folding
  (straight-use-package 'evil-vimish-fold)                                 ; vim keybindings for vimish-fold
  (vimish-fold-global-mode 1)
  (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
  (global-evil-vimish-fold-mode 1)
  ;;;}}}
  ;;}}}

  ; Key Mappings {{{
  (evil-define-key 'normal 'global (kbd "<leader>ev")
    (lambda () (interactive) (
      window--display-buffer (find-file-noselect "~/.emacs.d/config.org")
      (split-window (selected-window) nil 'above) 'window)))
  (evil-define-key 'normal 'global (kbd "<leader>sv")
    (lambda () (interactive) (load "~/.emacs.d/init.el")))
  ;}}}

  ;; Hide menu bar {{{
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil)
  ;;}}}

  ;;; show package load time
  (let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (setq initial-scratch-message
    (format "; *scratch*\n; config.org loaded in %.3fs" elapsed)))

#+END_SRC

** References

- [[https://github.com/emacs-evil/evil-collection][Evil collection repo]]
- [[https://packagm/tecosaur/emacs-config/blob/master/config.org][A good example of literate config]]
- [[https://www.reddit.com/r/emacs/comments/84l5jl/evil_how_can_i_autosave_whenever_i_make_a_change/][Auto-save?]]
- http://emacsrocks.com/
- https://github.com/mattmahn/emacsfiles/blob/master/emacs-config.org
- https://tammymakesthings.com/posts/2020-04-28-literate-emacs-configuration-in-org-mode/
- https://systemcrafters.cc/emacs-from-scratch/key-bindings-and-evil/
- [[https://idiocy.org/emacs-fonts-and-fontsets.html][setting emacs font]]
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Orgmode in Emacs]]
- https://www.emacswiki.org/emacs/GoodFonts
  
