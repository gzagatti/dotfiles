# Avoid breaking non-interactive logins (eg sftp)
if [[ $- == *i* ]]; then

  # Environment variables {{{
  export OSTYPE="$(uname -s)"
  if [[ "$OSTYPE" = darwin* ]]; then
    # macOS's $HOST changes with dhcp, etc. Use ComputerName if possible.
    SHORT_HOST=$(scutil --get ComputerName 2>/dev/null) || SHORT_HOST="${HOST/.*/}"
  else
    SHORT_HOST="${HOST/.*/}"
  fi
  # }}}

  # Shell options {{{
  setopt NO_CASE_GLOB
  setopt AUTO_CD
  autoload edit-command-line
  zle -N edit-command-line
  bindkey -v
  bindkey "^?" backward-delete-char
  bindkey "^R" history-incremental-search-backward
  bindkey -M vicmd v edit-command-line
  # }}}

  # History {{{
  setopt SHARE_HISTORY
  setopt APPEND_HISTORY
  setopt INC_APPEND_HISTORY
  setopt HIST_IGNORE_DUPS
  setopt HIST_REDUCE_BLANKS
  setopt HIST_VERIFY
  export HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
  export SAVEHIST=100000
  export HISTSIZE=$SAVEHIST
  # }}}

  # Theme {{{
  # https://gist.github.com/thomd/7667642
  # https://geoff.greer.fm/lscolors/
  if [[ -z "$THEME" ]]; then export THEME="leuven"; fi
  export CLICOLOR=1
  export LSCOLORS="excxhxDxbxhxhxhxhxfxfx"
  export LS_COLORS="leuven"
  if [[ $THEME == "leuven" ]]; then
    LS_COLORS="no=00:fi=00:di=34:ln=32;102:so=30;107:pi=33;103:ex=31:cd=33;107:bd=33;107:su=31;101:sg=34;106:tw=35;101:ow=34;101"
  elif [[ $THEME == "dracula" ]]; then
    LS_COLORS="no=00:fi=00:di=34:ln=32:so=37:pi=1;33:ex=31:bd=37:cd=37:su=37:sg=37:tw=35:ow=35"
  fi
  # }}}

  # Program specific {{{

  ## PATH {{{
  # add ~/.local/bin to PATH, before looking for other commands
  export PATH=$HOME/.local/bin:$PATH
  hash -f
  ## }}}

  ## brew {{{
  if [[ -z "$HOMEBREW_PREFIX" ]]; then
    if [ -f $HOME/.linuxbrew/bin/brew ]; then
      export HOMEBREW_PREFIX=$HOME/.linuxbrew
    elif [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
      export HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew
    elif hash brew &>/dev/null && [[ -z "$HOMEBREW_PREFIX" ]]; then
      export HOMEBREW_PREFIX=$(brew --prefix)
    fi
  fi

  if [[ -n "$HOMEBREW_PREFIX" ]]; then
    export HOMEBREW_CELLAR=$HOMEBREW_PREFIX/Cellar
    export HOMEBREW_REPOSITORY=$HOMEBREW_PREFIX/Homebrew
    export PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin${PATH+:$PATH}"
    export FPATH="$HOMEBREW_PREFIX/share/zsh/site-functions${FPATH+:$FPATH}"
    hash -f
  fi
  ## }}}

  ## direnv {{{
  if hash direnv 2>/dev/null; then
    eval "$(direnv hook zsh)"
  fi
  ## }}}

  ## text editor {{{
  if hash nvim 2>/dev/null; then
    export EDITOR=$(which nvim)
    export VISUAL=$(which nvim)
  elif hash vim 2>/dev/null; then
    export EDITOR=$(which vim)
    export VISUAL=$(which vim)
  else
    export EDITOR=$(which vi)
    export VISUAL=$(which vi)
  fi
  ## }}}

  ## tex {{{
  if hash tex 2>/dev/null; then
    export TEXMFCONFIG=$HOME/.local/share/texlive/texmf-config
    export TEXMFVAR=$HOME/.local/share/texlive/texmf-var
    export TEXMFHOME=$HOME/.local/share/texlive/texmf
  fi
  ## }}}

  ## rust {{{
  if hash cargo 2>/dev/null; then
    export PATH=$HOME/.cargo/bin${PATH:+:$PATH}
  fi
  ## }}}

  ## rbenv {{{
  if hash rbenv 2>/dev/null; then
    eval "$(rbenv init -)"
    export RBENV_ROOT="$(rbenv root)"
  fi
  ## }}}

  ## r {{{
  if hash R 2>/dev/null; then
    export R_PROFILE=$HOME/.RProfile
    alias R='R --no-save --no-restore'
    alias r='R --no-save --no-restore'
  fi
  ## }}}

  ## julia {{{
  if hash julia 2>/dev/null; then
    # LD_LIBRARY_PATH set by nix conflicts with julia
    alias julia='LD_LIBRARY_PATH= julia'
  fi
  ## }}}

  ## go {{{
  if hash go 2>/dev/null; then
    export GOPATH=$HOME/.go
  fi
  ## }}}

  ## pyenv {{{
  if hash pyenv 2>/dev/null; then
    export PYENV_ROOT="$(pyenv root)"
  elif [ -d "$HOME/.pyenv" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
  fi
  if hash pyenv 2>/dev/null; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    if hash brew 2>/dev/null; then
      alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
    fi
  fi
  ## }}}

  ## kitty {{{
  if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
    # scroll-and-clear-screen() {
    #   printf '\n%.0s' {1..$LINES}
    #   zle clear-screen
    # }
    # zle -N scroll-and-clear-screen
    # bindkey '^[[108;6u' scroll-and-clear-screen # ctrl + shit + l
    if hash emacs 2>/dev/null; then
      alias emacs="TERM=xterm-emacs emacs -nw"
    fi
  fi
  ## }}}

  ## nnn {{{
  # https://github.com/jarun/nnn
  if hash nnn 2>/dev/null; then
    export NNN_PLUG="/:fcd;p:preview-tui;m:mimelist;f:followln"
    export NNN_OPENER="nuke"
    n(){
      # To cd on quit only on ^G
      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

      # Block nesting of nnn in subshells
      [ "${NNNLVL:-0}" -eq 0 ] || {
          echo "nnn is already running"
          return
      }

      nnn -ea

      if [ -f "$NNN_TMPFILE" ]; then
              . "$NNN_TMPFILE"
              rm -f "$NNN_TMPFILE" > /dev/null
      fi
    }
  fi
  ## }}}

  ## ssh {{{
  # see: https://rabexc.org/posts/pitfalls-of-ssh-agents
  # see: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/ssh-agent.plugin.zsh
  ssh_env_cache="$HOME/.ssh/environment-$SHORT_HOST"

  function _start_agent() {
    # Check if ssh-agent is already running
    if [[ -f "$ssh_env_cache" ]]; then
      . "$ssh_env_cache" > /dev/null

      # Test if $SSH_AUTH_SOCK is visible
      zmodload zsh/net/socket
      if [[ -S "$SSH_AUTH_SOCK" ]] && zsocket "$SSH_AUTH_SOCK" 2>/dev/null; then
        return 0
      fi
    fi

    if [[ ! -d "$HOME/.ssh" ]]; then
      echo "ssh-agent requires ~/.ssh directory"
      return 1
    fi

    # start ssh-agent and setup environment
    ssh-agent -s -t 8h | sed '/^echo/d' >! "$ssh_env_cache"
    chmod 600 "$ssh_env_cache"
    . "$ssh_env_cache" > /dev/null
  }

  _start_agent

  # adapted from ChatGPT
  _ssh_add_identities() {

    # variables managed by _arguments
    local curcontext="$curcontext" state line
    # declares an associative array which can be used to store and retrieve options and their values
    typeset -A opt_args

    local identities

    # gather identities from .pub files, stripping the .pub extension
    identities=($(
      ls -1 $HOME/.ssh/*.pub 2>/dev/null | sed 's/\.pub$//'
    ))

    # zsh builtin for parsing and handling CLI arguments within completion functions
    # -C option specifies that the completion should handle arguments starting
    # with anything (`*`), with the last argument being an identity
    # (`::identity`) which is directed to the `identity` state for further completion
    _arguments -C '*::ssh_identity:->ssh_identity' && return

    case $state in
      ssh_identity)
        if (( ${#identities[@]} )); then
          _describe -t identities 'SSH identities' identities && return
        fi
        _files
        ;;
    esac
  }

  compdef _ssh_add_identities ssh-add
  autoload -Uz _ssh_add_identities

  unset ssh_env_cache
  unfunction _start_agent
  ## }}}

  # }}}

  # PS1 {{{
  # (py env)[host user]:~ 99$
  # manual http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information
  autoload -Uz vcs_info
  setopt prompt_subst
  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:git*+set-message:*' hooks git-changes
  # see https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples#L159
  +vi-git-changes(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]]; then
      local git_status=`git status --porcelain`
      if [[ -z $git_status ]]; then
        hook_com[staged]+=''
      elif echo "${git_status}" | grep -q "^[MADRCU]"; then
        hook_com[staged]+='+'
      elif echo "${git_status}" | grep -q "^ [MADRCU]"; then
        hook_com[staged]+='*'
      elif echo "${git_status}" | grep -q "^??"; then
        hook_com[staged]+='?'
      elif echo "${git_status}" | grep -q "^!!"; then
        hook_com[staged]+='!'
      fi
    fi
  }
  zstyle ':vcs_info:git:*' formats 'î‚  %b%c'
  # information about the current dev environment
  _devenv_info() {
    if hash $1 2>/dev/null; then
      local venv=$($1 version-name)
      if [ -n "$venv" ] && [ $venv != system ]; then
        printf "$2 $venv"
      fi
    fi
    return
  }
  # inspired by
  # https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples#L51
  precmd_ps1() {

    # if [[ "$TERM" == "xterm-"* ]] || [[ "$TERM" == "alacritty" ]] || [[ "$TERM" == "wezterm" ]]; then
    #   # https://gist.github.com/blueyed/c8470c2aad3381c33ea3
    #   # https://stackoverflow.com/questions/2507337/how-to-determine-a-terminals-background-color
    #   local oldstty=$(stty -g)
    #   stty raw -echo min 0 time 1
    #   # terminal escape sequence to get the terminal background color
    #   # only works in xterms
    #   # https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Operating-System-Commands
    #   printf '\033]11;?\033\\'
    #   sleep 0.00000001
    #   read -r termbg
    #   stty $oldstty
    #   local termbg=$(echo $termbg | sed 's/.*\(rgb:[0-9a-f/]*\).*/\1/')
    #   if [[ $termbg == "rgb:f8f8/fbfb/f8f8" ]]; then
    #     THEME="leuven"
    #   elif [[ $termbg == "rgb:2828/2a2a/3636" ]]; then
    #     THEME="dracula"
    #   fi
    # fi

    # https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Visual-effects
    color=""
    if [[ $THEME == "leuven" ]]; then
      if [[ -n $SSH_CLIENT ]]; then
        color='%(?.%K{10}.%K{9}%F{1})'
      else
        color='%(?.%K{11}.%K{9}%F{1})'
      fi
      LS_COLORS="no=00:fi=00:di=34:ln=32;102:so=30;107:pi=33;103:ex=31:cd=33;107:bd=33;107:su=31;101:sg=34;106:tw=35;101:ow=34;101"
    elif [[ $THEME == "dracula" ]]; then
      if [[ -n $SSH_CLIENT ]]; then
        color='%(?.%F{magenta}.%F{red})'
      else
        color='%(?.%F{black}.%F{red})'
      fi
      LS_COLORS="no=00:fi=00:di=34:ln=32:so=37:pi=1;33:ex=31:bd=37:cd=37:su=37:sg=37:tw=35:ow=35"
    fi
    local host_info_msg="[%m %n]:%1~ %#"
    local dev_info_msg

    if [[ -n $IN_NIX_SHELL ]]; then
      dev_info_msg="${dev_info_msg}nix-shell"
    fi

    local pyenv_info_msg=`_devenv_info pyenv py`
    if [[ -n $pyenv_info_msg ]]; then
        dev_info_msg="${dev_info_msg}${pyenv_info_msg}"
    fi

    local rbenv_info_msg=`_devenv_info rbenv rb`
    if [[ -n $rbenv_info_msg ]]; then
      if [[ -n $dev_info_msg ]]; then
        dev_info_msg="${dev_info_msg}, "
      fi
      dev_info_msg="${dev_info_msg}${rbenv_info_msg}"
    fi

    vcs_info
    if [[ -n $vcs_info_msg_0_ ]]; then
      if [[ -n $dev_info_msg ]]; then
        dev_info_msg="${dev_info_msg} "
      fi
      dev_info_msg="${dev_info_msg}${vcs_info_msg_0_}"
    fi

    if [[ -n $dev_info_msg ]]; then
      dev_info_msg="(${dev_info_msg})"
    fi

    if [[ $THEME = "leuven" ]]; then
      PS1="$color${dev_info_msg}${host_info_msg}%k%f "
    elif [[ $THEME = "dracula" ]]; then
      PS1="$color${dev_info_msg}${host_info_msg}%k%f "
    else
      PS1="$color${dev_info_msg}${host_info_msg} "
    fi

  }
  precmd_functions+=( precmd_ps1 )
  preexec() {
    printf '\033[0m'
  }
  # }}}

  # Tab completion {{{
  # case insensitive path-completion
  zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'

  # partial completion
  zstyle ':completion:*' list-suffixes
  zstyle ':completion:*' expand prefix suffix

  # load bashcompinit for some old bash completions
  autoload bashcompinit && bashcompinit

  autoload -Uz compinit
  compinit -u
  # }}}

  # Alias and functions {{{

  ## Source zshrc {{{
  alias zshrc='source ~/.zshrc'
  ## }}}

  ## List with colors by default {{{
  alias ls='ls --color=auto'
  ## }}}

  ## simple calculator {{{
  # https://lukasmestan.com/simple-zsh-calculator/
  function = { echo "$@" | bc -l }
  ## }}}

  if [[ $OSTYPE == Linux* ]]; then

    ## More convenient xdg-open {{{
    function open { setsid xdg-open "$1" &>/dev/null }
    ## }}}

  fi

  if  [[ $OSTYPE == Darwin* ]]; then

    ## turn on/off hidden files visibility {{{
    alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
    alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
    ## }}}

    ## ql: show a "Quick Look" view of files {{{
    ql() { /usr/bin/qlmanage -p "$@" >& /dev/null & }
    ## }}}

    ## firefox: open document in Firefox {{{
    firefox() { if [ $1 ]; then open -a Firefox $1; else open -a "Firefox"; fi }
    ## }}}

  fi

  # }}}

  # PATH {{{
  # add ~/.local/bin to PATH to the front of the path
  export PATH=$HOME/.local/bin:$PATH
  # removes duplicates from the PATH
  PATH=`printf %s "$PATH" | awk -v RS=: '{ if (!arr[$0]++) {printf("%s%s",!ln++?"":":",$0)}}'`
  # }}}

fi
